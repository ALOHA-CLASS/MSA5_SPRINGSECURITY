package com.aloha.kakao.service;

import java.security.Principal;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;

import com.aloha.kakao.dto.CustomUser;
import com.aloha.kakao.dto.UserAuth;
import com.aloha.kakao.dto.UserSocial;
import com.aloha.kakao.dto.Users;
import com.aloha.kakao.mapper.UserMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserMapper userMapper;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Override
    public void login(Users user, HttpServletRequest request) {
        // üíç ÌÜ†ÌÅ∞ ÏÉùÏÑ±
        String username = user.getUserId();         // ÏïÑÏù¥Îîî
        String password = user.getUserPwCheck();    // ÏïîÌò∏ÌôîÎêòÏßÄ ÏïäÏùÄ ÎπÑÎ∞ÄÎ≤àÌò∏
        UsernamePasswordAuthenticationToken token 
            = new UsernamePasswordAuthenticationToken(username, password);
        
        // ÌÜ†ÌÅ∞Ïóê ÏöîÏ≤≠ Ï†ïÎ≥¥ Îì±Î°ù
        // token.setDetails( new WebAuthenticationDetails(request) );

        // ÌÜ†ÌÅ∞ÏùÑ Ïù¥Ïö©ÌïòÏó¨ Ïù∏Ï¶ù
        Authentication authentication = authenticationManager.authenticate(token);

        // Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©Ïûê ÌôïÏù∏
        CustomUser loginUser = (CustomUser) authentication.getPrincipal();
        log.info("Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©Ïûê ÏïÑÏù¥Îîî : " + loginUser.getUsername());

        // ÏãúÌÅêÎ¶¨Ìã∞ Ïª®ÌÖçÏä§Ìä∏Ïóê Îì±Î°ù
        SecurityContextHolder.getContext().setAuthentication(authentication);
    }

    /**
     * ‚úÖ ÌöåÏõê Í∞ÄÏûÖ
     * 1. ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïîÌò∏Ìôî
     * 2. ÌöåÏõê Îì±Î°ù
     * 3. Í∏∞Î≥∏ Í∂åÌïú Îì±Î°ù
     */
    @Override
    public int join(Users user) throws Exception {
        // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïîÌò∏Ìôî
        String userPw = user.getUserPw();
        String encodedUserPw = passwordEncoder.encode(userPw);  // üîí ÏïîÌò∏Ìôî
        user.setUserPw(encodedUserPw);

        // ÌöåÏõê Îì±Î°ù
        int result = userMapper.join(user);

        if( result > 0 ) {
            // ÌöåÏõê Í∏∞Î≥∏ Í∂åÌïú Îì±Î°ù
            UserAuth userAuth = new UserAuth();
            userAuth.setUserId( user.getUserId() );
            userAuth.setAuth("ROLE_USER");
            result += userMapper.insertAuth(userAuth);
        }
        return result;
    }

    @Override
    public int insertAuth(UserAuth userAuth) throws Exception {
        int result = userMapper.insertAuth(userAuth);
        return result;
    }
    
    @Override
    public int insertSocial(UserSocial userSocial) throws Exception {
        int result = userMapper.insertSocial(userSocial);
        return result;
    }

    @Override
    public UserSocial selectSocial(UserSocial userSocial) throws Exception {
        UserSocial social = userMapper.selectSocial(userSocial);
        return social;
    }

    @Override
    public Users select(String userId) throws Exception {
        Users user = userMapper.select(userId);
        return user;
    }

    @Override
    public int updateSocial(UserSocial userSocial) throws Exception {
        int result = userMapper.updateSocial(userSocial);
        return result;
    }

    @Override
    public int update(Users user) throws Exception {
        int result = userMapper.update(user);
        return result;
    }

    /**
     * Principal 
     * 1. Principal Ïù¥ OAuth2AuthenticationToken Ïù¥Î©¥, 
     */
    @Override
    public Users principalToUser(Principal principal) throws Exception {

        log.info("principal : " + principal);
        if( principal instanceof OAuth2AuthenticationToken ) {
            log.info("OAuth Î°ú Ïù∏Ï¶ù...");
            OAuth2User oauth2User = ((OAuth2AuthenticationToken) principal).getPrincipal();
            Map<String, Object> attributes = oauth2User.getAttributes();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode node = objectMapper.valueToTree( attributes );
            
            String profileImg = node.get("properties").get("profile_image").toString();
            log.info("profileImg : " + profileImg);

        }

        return null;
    }   
    
}
